package com.PMSystems.util;

import com.PMSystems.*;
import com.PMSystems.logger.*;
import com.PMSystems.dbbeans.*;
import com.PMSystems.sejbs.*;

import java.util.*;

/**
 *
 * <p>Title: </p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2002-2006</p>
 * <p>Company: Makesbridge Technology </p>
 * @author not attributable
 * @version 1.0
 */

public class AutoNumberFactory {

    private static DataQueryServer dataQueryServer = null;
    static {
        dataQueryServer = EJBHomesFactory.getDataQueryServerRemote();
    }

//    private static AutoNumbersRemoteHome autoNumbersRemoteHome;

    /**
     * getNextNumber()  Gets the next key for the given collection.
     * Note 1: you must deploy EJB AutoNumbers
     * Note 2: the keys are persistent in your database, independent of
     * the actual table
     * Note 3: you can only add instances to the collection which have a
     * key generated by this method, otherwise the keys are not guaranteed
     * to be unique
     * Note 4: key values are >= 0
     *
     * @param tableName name of the table for which you want an autonumber
     * @return Long Next integer number
     */

    public static synchronized Long getNextNumber(String tableName) {

        long lastNumber = -1;
        boolean exception = false;

        //--------- Fetching Primary Key ---------
        try {
            lastNumber = dataQueryServer.getAutoNumbers(tableName);
//            System.out.println("+++ Table: "+tableName+", LastNumber:"+lastNumber);
            if(lastNumber<0) {
                exception = true;
                dataQueryServer.createAutonumbers(tableName);
            }

        } catch (Exception e) {
            WebServerLogger.getLogger().log(new LogEntry("AutoNumberFactory","getNextNumber","setting last number "+e.getMessage()));
            WebServerLogger.getLogger().log(e);
            e.printStackTrace();
        }

        //--------- Updating Primary Key Record ---------
        try {
            if(exception) {
                lastNumber = 1;//new record created.
                System.out.println("+++(exception) Table: "+tableName+", LastNumber:"+lastNumber);
            }
            if(!dataQueryServer.updateAutonumbers(lastNumber+1, tableName)) {
                WebServerLogger.getLogger().log(new LogEntry("AutoNumberFactory","getNextNumber","AutoNumber Table not updated for TableName:"+tableName+", LastNumber:"+lastNumber));
                System.out.println("+++++ AutoNumber Table NOT UPDATED for TableName:"+tableName+", LastNumber:"+lastNumber);
                lastNumber = -1;
            } //else
//                System.out.println("+++ Table: "+tableName+", NEW_LastNumber:"+(lastNumber+1));

        } catch (Exception e) {
            WebServerLogger.getLogger().log(new LogEntry("AutoNumberFactory","getNextNumber",e.getMessage()));
            WebServerLogger.getLogger().log(e);
            e.printStackTrace();
        }
//        System.out.println("+++(return) Table: "+tableName+", LastNumber:"+lastNumber);
        return new Long(lastNumber);
    }

    /** Suhaib.
     *
     * getNextNumber()  Gets the next key for the given collection.
     * Note 1: you must deploy EJB AutoNumbers
     * Note 2: the keys are persistent in your database, independent of
     * the actual table
     * Note 3: you can only add instances to the collection which have a
     * key generated by this method, otherwise the keys are not guaranteed
     * to be unique
     * Note 4: key values are >= 1
     *
     * Note 5: The returned value will be the firstValid autoNumber for the given range.
     * The autoNumbers will be valid from returnValue to less than (returnValue+totalNumbersRequired)
     *
     * @param tableName name of the table for which you want an autonumber
     * @param totalNumbersRequired count for the AutoNumbers required.
     * @return Long Next integer number
     */
    public static synchronized Long getNextNumber(String tableName, int totalNumbersRequired) {

        long lastNumber = -1;
        boolean exception = false;

        //--------- Fetching Primary Key ---------
        try {
            lastNumber = dataQueryServer.getAutoNumbers(tableName);
//            System.out.println("+++ Table: "+tableName+", LastNumber:"+lastNumber);
            if(lastNumber<0) {
                exception = true;
                dataQueryServer.createAutonumbers(tableName);
            }

        } catch (Exception e) {
            WebServerLogger.getLogger().log(new LogEntry("AutoNumberFactory","getNextNumber","setting last number "+e.getMessage()));
            WebServerLogger.getLogger().log(e);
            e.printStackTrace();
        }

        //--------- Updating Primary Key Record ---------
        try {
            if(exception) {
                lastNumber = 1;//new record created.
                System.out.println("+++(Exception) Table: "+tableName+", LastNumber:"+lastNumber);
            }

            if(!dataQueryServer.updateAutonumbers(lastNumber+totalNumbersRequired, tableName)) {
                WebServerLogger.getLogger().log(new LogEntry("AutoNumberFactory","getNextNumber","AutoNumber Table not updated for TableName:"+tableName+", LastNumber:"+lastNumber));
                System.out.println("+++++ AutoNumber Table NOT UPDATED for TableName:"+tableName+", LastNumber:"+lastNumber);
                lastNumber = -1;
            } //else
//                System.out.println("+++ Table: "+tableName+", New_LastNumber:"+(lastNumber+totalNumbersRequired));

        } catch (Exception e) {
            WebServerLogger.getLogger().log(new LogEntry("AutoNumberFactory","getNextNumber",e.getMessage()));
            WebServerLogger.getLogger().log(e);
            e.printStackTrace();
        }
//        System.out.println("+++(return) Table: "+tableName+", LastNumber:"+lastNumber);
        return new Long(lastNumber);
    }

    /**
     * Resets the given autonumber to zero.
     * Use with extreme care!
     *
     * @param tableName name of the table
     */

    public static void resetAutoNumber(String tableName) {
        setAutoNumber(tableName,new Long(1));
    }

    /**
     *
     * Sets the given autonumber to the given value so that it starts
     * counting at the given value.
     * Use with extreme care!
     *
     * @param tableName name of the table
     * @param value new value against the tableName
     */
    public static void setAutoNumber(String tableName, Long value) {

        AutonumbersDataBean adb = null;

        //---------- Confirm Record Exists ---------
        try {

            long lastNumber = dataQueryServer.getAutoNumbers(tableName);
            if (lastNumber < 0) {
                dataQueryServer.createAutonumbers(tableName);
            }
        } catch (Exception e) {
            WebServerLogger.getLogger().log(new LogEntry("AutoNumberFactory","setNextNumber",e.getMessage()));
            WebServerLogger.getLogger().log(e);
            e.printStackTrace();
        }

        //---------- Updating the existing LastNumber ---------
        try {
            dataQueryServer.updateAutonumbers(value.longValue(), tableName);
        } catch (Exception e) {
            WebServerLogger.getLogger().log(new LogEntry("AutoNumberFactory","setNextNumber",e.getMessage()));
            WebServerLogger.getLogger().log(e);
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        //AutoNumberFactory autoNumberFactory1 = new AutoNumberFactory();
        System.out.println("The Number is "+AutoNumberFactory.getNextNumber("Campaign"));
    }
}